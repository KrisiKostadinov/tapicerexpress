generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role?           @default(USER)
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Token     Token[]
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Token {
  id        String   @id @default(uuid()) @map("_id")
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// end auth

model Service {
  id          String   @id @default(uuid()) @map("_id")
  title       String
  description String?  @default("")
  steps       String[] @default([])
  endMessage  String?  @default("") @map("end_message")
  createdAt   DateTime @default(now()) @map("created_at")
}

// setting
model Settings {
  id String @id @default("singleton-settings") @map("_id")

  companyData   CompanyData @relation(fields: [companyDataId], references: [id], onDelete: Cascade)
  companyDataId String      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompanyData {
  id              String    @id @default("singleton-company-data") @map("_id")
  emailAddress    String    @map("email_address")
  phoneNumber     String    @map("phone_number")
  physicalAddress String    @map("physical_address")
  websiteTitle    String    @map("website_title")
  settings        Settings?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
